<?php

namespace XLite\Model\Proxy\__CG__\XLite\Model;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Category extends \XLite\Model\Category implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function clearSitemaps()
    {
        $this->__load();
        return parent::clearSitemaps();
    }

    public function getFeaturedProductsCount()
    {
        $this->__load();
        return parent::getFeaturedProductsCount();
    }

    public function addFeaturedProducts(\XLite\Module\CDev\FeaturedProducts\Model\FeaturedProduct $featuredProducts)
    {
        $this->__load();
        return parent::addFeaturedProducts($featuredProducts);
    }

    public function getFeaturedProducts()
    {
        $this->__load();
        return parent::getFeaturedProducts();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setParent(\XLite\Model\Category $parent = NULL)
    {
        $this->__load();
        return parent::setParent($parent);
    }

    public function setImage(\XLite\Model\Image\Category\Image $image = NULL)
    {
        $this->__load();
        return parent::setImage($image);
    }

    public function hasImage()
    {
        $this->__load();
        return parent::hasImage();
    }

    public function isVisible()
    {
        $this->__load();
        return parent::isVisible();
    }

    public function getSubcategoriesCount()
    {
        $this->__load();
        return parent::getSubcategoriesCount();
    }

    public function hasSubcategories()
    {
        $this->__load();
        return parent::hasSubcategories();
    }

    public function getSubcategories()
    {
        $this->__load();
        return parent::getSubcategories();
    }

    public function getSiblings($hasSelf = false)
    {
        $this->__load();
        return parent::getSiblings($hasSelf);
    }

    public function getPath()
    {
        $this->__load();
        return parent::getPath();
    }

    public function getStringPath()
    {
        $this->__load();
        return parent::getStringPath();
    }

    public function getParentId()
    {
        $this->__load();
        return parent::getParentId();
    }

    public function setParentId($parentID)
    {
        $this->__load();
        return parent::setParentId($parentID);
    }

    public function getMembershipIds()
    {
        $this->__load();
        return parent::getMembershipIds();
    }

    public function hasAvailableMembership()
    {
        $this->__load();
        return parent::hasAvailableMembership();
    }

    public function getProductsCount()
    {
        $this->__load();
        return parent::getProductsCount();
    }

    public function getProducts(\XLite\Core\CommonCell $cnd = NULL, $countOnly = false)
    {
        $this->__load();
        return parent::getProducts($cnd, $countOnly);
    }

    public function countProducts(\XLite\Core\CommonCell $cnd = NULL)
    {
        $this->__load();
        return parent::countProducts($cnd);
    }

    public function getViewDescription()
    {
        $this->__load();
        return parent::getViewDescription();
    }

    public function getPosition()
    {
        $this->__load();
        return parent::getPosition();
    }

    public function setPosition($position)
    {
        $this->__load();
        return parent::setPosition($position);
    }

    public function generateCleanURL()
    {
        $this->__load();
        return parent::generateCleanURL();
    }

    public function getCategoryId()
    {
        $this->__load();
        return parent::getCategoryId();
    }

    public function setLpos($lpos)
    {
        $this->__load();
        return parent::setLpos($lpos);
    }

    public function getLpos()
    {
        $this->__load();
        return parent::getLpos();
    }

    public function setRpos($rpos)
    {
        $this->__load();
        return parent::setRpos($rpos);
    }

    public function getRpos()
    {
        $this->__load();
        return parent::getRpos();
    }

    public function setEnabled($enabled)
    {
        $this->__load();
        return parent::setEnabled($enabled);
    }

    public function getEnabled()
    {
        $this->__load();
        return parent::getEnabled();
    }

    public function setShowTitle($showTitle)
    {
        $this->__load();
        return parent::setShowTitle($showTitle);
    }

    public function getShowTitle()
    {
        $this->__load();
        return parent::getShowTitle();
    }

    public function setDepth($depth)
    {
        $this->__load();
        return parent::setDepth($depth);
    }

    public function getDepth()
    {
        $this->__load();
        return parent::getDepth();
    }

    public function setPos($pos)
    {
        $this->__load();
        return parent::setPos($pos);
    }

    public function getPos()
    {
        $this->__load();
        return parent::getPos();
    }

    public function setRootCategoryLook($rootCategoryLook)
    {
        $this->__load();
        return parent::setRootCategoryLook($rootCategoryLook);
    }

    public function getRootCategoryLook()
    {
        $this->__load();
        return parent::getRootCategoryLook();
    }

    public function setCleanURL($cleanURL)
    {
        $this->__load();
        return parent::setCleanURL($cleanURL);
    }

    public function getCleanURL()
    {
        $this->__load();
        return parent::getCleanURL();
    }

    public function setQuickFlags(\XLite\Model\Category\QuickFlags $quickFlags = NULL)
    {
        $this->__load();
        return parent::setQuickFlags($quickFlags);
    }

    public function getQuickFlags()
    {
        $this->__load();
        return parent::getQuickFlags();
    }

    public function addMemberships(\XLite\Model\Membership $memberships)
    {
        $this->__load();
        return parent::addMemberships($memberships);
    }

    public function getMemberships()
    {
        $this->__load();
        return parent::getMemberships();
    }

    public function getImage()
    {
        $this->__load();
        return parent::getImage();
    }

    public function addCategoryProducts(\XLite\Model\CategoryProducts $categoryProducts)
    {
        $this->__load();
        return parent::addCategoryProducts($categoryProducts);
    }

    public function getCategoryProducts()
    {
        $this->__load();
        return parent::getCategoryProducts();
    }

    public function addChildren(\XLite\Model\Category $children)
    {
        $this->__load();
        return parent::addChildren($children);
    }

    public function getChildren()
    {
        $this->__load();
        return parent::getChildren();
    }

    public function getParent()
    {
        $this->__load();
        return parent::getParent();
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setName($value)
    {
        $this->__load();
        return parent::setName($value);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setDescription($value)
    {
        $this->__load();
        return parent::setDescription($value);
    }

    public function getMetaTags()
    {
        $this->__load();
        return parent::getMetaTags();
    }

    public function setMetaTags($value)
    {
        $this->__load();
        return parent::setMetaTags($value);
    }

    public function getMetaDesc()
    {
        $this->__load();
        return parent::getMetaDesc();
    }

    public function setMetaDesc($value)
    {
        $this->__load();
        return parent::setMetaDesc($value);
    }

    public function getMetaTitle()
    {
        $this->__load();
        return parent::getMetaTitle();
    }

    public function setMetaTitle($value)
    {
        $this->__load();
        return parent::setMetaTitle($value);
    }

    public function prepareBeforeSave()
    {
        $this->__load();
        return parent::prepareBeforeSave();
    }

    public function setEditLanguage($code)
    {
        $this->__load();
        return parent::setEditLanguage($code);
    }

    public function getTranslations()
    {
        $this->__load();
        return parent::getTranslations();
    }

    public function addTranslations(\XLite\Model\Base\Translation $translation)
    {
        $this->__load();
        return parent::addTranslations($translation);
    }

    public function getTranslation($code = NULL, $allowEmptyResult = false)
    {
        $this->__load();
        return parent::getTranslation($code, $allowEmptyResult);
    }

    public function getHardTranslation($code = NULL)
    {
        $this->__load();
        return parent::getHardTranslation($code);
    }

    public function getSoftTranslation($code = NULL)
    {
        $this->__load();
        return parent::getSoftTranslation($code);
    }

    public function hasTranslation($code = NULL)
    {
        $this->__load();
        return parent::hasTranslation($code);
    }

    public function getTranslationCodes()
    {
        $this->__load();
        return parent::getTranslationCodes();
    }

    public function detach()
    {
        $this->__load();
        return parent::detach();
    }

    public function cloneEntity()
    {
        $this->__load();
        return parent::cloneEntity();
    }

    public function map(array $data)
    {
        $this->__load();
        return parent::map($data);
    }

    public function __get($name)
    {
        $this->__load();
        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        $this->__load();
        return parent::__set($name, $value);
    }

    public function __isset($name)
    {
        $this->__load();
        return parent::__isset($name);
    }

    public function __unset($name)
    {
        $this->__load();
        return parent::__unset($name);
    }

    public function getRepository()
    {
        $this->__load();
        return parent::getRepository();
    }

    public function checkCache()
    {
        $this->__load();
        return parent::checkCache();
    }

    public function __call($method, array $args = array (
))
    {
        $this->__load();
        return parent::__call($method, $args);
    }

    public function setterProperty($property, $value)
    {
        $this->__load();
        return parent::setterProperty($property, $value);
    }

    public function getterProperty($property)
    {
        $this->__load();
        return parent::getterProperty($property);
    }

    public function isPersistent()
    {
        $this->__load();
        return parent::isPersistent();
    }

    public function isDetached()
    {
        $this->__load();
        return parent::isDetached();
    }

    public function getUniqueIdentifierName()
    {
        $this->__load();
        return parent::getUniqueIdentifierName();
    }

    public function getUniqueIdentifier()
    {
        $this->__load();
        return parent::getUniqueIdentifier();
    }

    public function update()
    {
        $this->__load();
        return parent::update();
    }

    public function create()
    {
        $this->__load();
        return parent::create();
    }

    public function delete()
    {
        $this->__load();
        return parent::delete();
    }

    public function processFiles($field, array $data)
    {
        $this->__load();
        return parent::processFiles($field, $data);
    }

    public function prepareEntityBeforeCommit($type)
    {
        $this->__load();
        return parent::prepareEntityBeforeCommit($type);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'category_id', 'lpos', 'rpos', 'enabled', 'show_title', 'depth', 'pos', 'root_category_look', 'cleanURL', 'featuredProducts', 'quickFlags', 'memberships', 'image', 'categoryProducts', 'children', 'parent', 'translations');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}