<?php

namespace XLite\Model\Proxy\__CG__\XLite\Model\Image\Product;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Image extends \XLite\Model\Image\Product\Image implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setOrderby($orderby)
    {
        $this->__load();
        return parent::setOrderby($orderby);
    }

    public function getOrderby()
    {
        $this->__load();
        return parent::getOrderby();
    }

    public function setAlt($alt)
    {
        $this->__load();
        return parent::setAlt($alt);
    }

    public function getAlt()
    {
        $this->__load();
        return parent::getAlt();
    }

    public function setWidth($width)
    {
        $this->__load();
        return parent::setWidth($width);
    }

    public function getWidth()
    {
        $this->__load();
        return parent::getWidth();
    }

    public function setHeight($height)
    {
        $this->__load();
        return parent::setHeight($height);
    }

    public function getHeight()
    {
        $this->__load();
        return parent::getHeight();
    }

    public function setHash($hash)
    {
        $this->__load();
        return parent::setHash($hash);
    }

    public function getHash()
    {
        $this->__load();
        return parent::getHash();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setPath($path)
    {
        $this->__load();
        return parent::setPath($path);
    }

    public function getPath()
    {
        $this->__load();
        return parent::getPath();
    }

    public function setFileName($fileName)
    {
        $this->__load();
        return parent::setFileName($fileName);
    }

    public function getFileName()
    {
        $this->__load();
        return parent::getFileName();
    }

    public function setMime($mime)
    {
        $this->__load();
        return parent::setMime($mime);
    }

    public function getMime()
    {
        $this->__load();
        return parent::getMime();
    }

    public function setStorageType($storageType)
    {
        $this->__load();
        return parent::setStorageType($storageType);
    }

    public function setSize($size)
    {
        $this->__load();
        return parent::setSize($size);
    }

    public function getSize()
    {
        $this->__load();
        return parent::getSize();
    }

    public function setDate($date)
    {
        $this->__load();
        return parent::setDate($date);
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function setProduct(\XLite\Model\Product $product = NULL)
    {
        $this->__load();
        return parent::setProduct($product);
    }

    public function getProduct()
    {
        $this->__load();
        return parent::getProduct();
    }

    public function getFrontURL()
    {
        $this->__load();
        return parent::getFrontURL();
    }

    public function checkImageHash()
    {
        $this->__load();
        return parent::checkImageHash();
    }

    public function isExists()
    {
        $this->__load();
        return parent::isExists();
    }

    public function cloneEntity()
    {
        $this->__load();
        return parent::cloneEntity();
    }

    public function getResizedURL($width = NULL, $height = NULL)
    {
        $this->__load();
        return parent::getResizedURL($width, $height);
    }

    public function isImage()
    {
        $this->__load();
        return parent::isImage();
    }

    public function getBody()
    {
        $this->__load();
        return parent::getBody();
    }

    public function getStorageType()
    {
        $this->__load();
        return parent::getStorageType();
    }

    public function readOutput($start = NULL, $length = NULL)
    {
        $this->__load();
        return parent::readOutput($start, $length);
    }

    public function isFileExists($path = NULL, $forceFile = false)
    {
        $this->__load();
        return parent::isFileExists($path, $forceFile);
    }

    public function getURL()
    {
        $this->__load();
        return parent::getURL();
    }

    public function getGetterURL()
    {
        $this->__load();
        return parent::getGetterURL();
    }

    public function getAdminGetterURL()
    {
        $this->__load();
        return parent::getAdminGetterURL();
    }

    public function getExtension()
    {
        $this->__load();
        return parent::getExtension();
    }

    public function getExtensionByMIME()
    {
        $this->__load();
        return parent::getExtensionByMIME();
    }

    public function isURL($path = NULL)
    {
        $this->__load();
        return parent::isURL($path);
    }

    public function getMimeClass()
    {
        $this->__load();
        return parent::getMimeClass();
    }

    public function getMimeName()
    {
        $this->__load();
        return parent::getMimeName();
    }

    public function getLoadError()
    {
        $this->__load();
        return parent::getLoadError();
    }

    public function loadFromRequest($key)
    {
        $this->__load();
        return parent::loadFromRequest($key);
    }

    public function loadFromLocalFile($path, $basename = NULL)
    {
        $this->__load();
        return parent::loadFromLocalFile($path, $basename);
    }

    public function loadFromURL($url, $copy2fs = false)
    {
        $this->__load();
        return parent::loadFromURL($url, $copy2fs);
    }

    public function removeFile($path = NULL)
    {
        $this->__load();
        return parent::removeFile($path);
    }

    public function renewStorage()
    {
        $this->__load();
        return parent::renewStorage();
    }

    public function renewDependentStorage()
    {
        $this->__load();
        return parent::renewDependentStorage();
    }

    public function getDuplicates()
    {
        $this->__load();
        return parent::getDuplicates();
    }

    public function prepareBeforeSave()
    {
        $this->__load();
        return parent::prepareBeforeSave();
    }

    public function prepareRemove()
    {
        $this->__load();
        return parent::prepareRemove();
    }

    public function getStoragePath($path = NULL)
    {
        $this->__load();
        return parent::getStoragePath($path);
    }

    public function map(array $data)
    {
        $this->__load();
        return parent::map($data);
    }

    public function __get($name)
    {
        $this->__load();
        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        $this->__load();
        return parent::__set($name, $value);
    }

    public function __isset($name)
    {
        $this->__load();
        return parent::__isset($name);
    }

    public function __unset($name)
    {
        $this->__load();
        return parent::__unset($name);
    }

    public function getRepository()
    {
        $this->__load();
        return parent::getRepository();
    }

    public function checkCache()
    {
        $this->__load();
        return parent::checkCache();
    }

    public function detach()
    {
        $this->__load();
        return parent::detach();
    }

    public function __call($method, array $args = array (
))
    {
        $this->__load();
        return parent::__call($method, $args);
    }

    public function setterProperty($property, $value)
    {
        $this->__load();
        return parent::setterProperty($property, $value);
    }

    public function getterProperty($property)
    {
        $this->__load();
        return parent::getterProperty($property);
    }

    public function isPersistent()
    {
        $this->__load();
        return parent::isPersistent();
    }

    public function isDetached()
    {
        $this->__load();
        return parent::isDetached();
    }

    public function getUniqueIdentifierName()
    {
        $this->__load();
        return parent::getUniqueIdentifierName();
    }

    public function getUniqueIdentifier()
    {
        $this->__load();
        return parent::getUniqueIdentifier();
    }

    public function update()
    {
        $this->__load();
        return parent::update();
    }

    public function create()
    {
        $this->__load();
        return parent::create();
    }

    public function delete()
    {
        $this->__load();
        return parent::delete();
    }

    public function processFiles($field, array $data)
    {
        $this->__load();
        return parent::processFiles($field, $data);
    }

    public function prepareEntityBeforeCommit($type)
    {
        $this->__load();
        return parent::prepareEntityBeforeCommit($type);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'orderby', 'alt', 'width', 'height', 'hash', 'id', 'path', 'fileName', 'mime', 'storageType', 'size', 'date', 'product');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}