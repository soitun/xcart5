<?php

namespace XLite\Model\Proxy\__CG__\XLite\Model\Order;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Surcharge extends \XLite\Model\Order\Surcharge implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getOrder()
    {
        $this->__load();
        return parent::getOrder();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setType($type)
    {
        $this->__load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function setCode($code)
    {
        $this->__load();
        return parent::setCode($code);
    }

    public function getCode()
    {
        $this->__load();
        return parent::getCode();
    }

    public function setClass($class)
    {
        $this->__load();
        return parent::setClass($class);
    }

    public function getClass()
    {
        $this->__load();
        return parent::getClass();
    }

    public function setInclude($include)
    {
        $this->__load();
        return parent::setInclude($include);
    }

    public function getInclude()
    {
        $this->__load();
        return parent::getInclude();
    }

    public function setAvailable($available)
    {
        $this->__load();
        return parent::setAvailable($available);
    }

    public function getAvailable()
    {
        $this->__load();
        return parent::getAvailable();
    }

    public function getValue()
    {
        $this->__load();
        return parent::getValue();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getOwner()
    {
        $this->__load();
        return parent::getOwner();
    }

    public function setOwner(\XLite\Model\Base\SurchargeOwner $owner = NULL)
    {
        $this->__load();
        return parent::setOwner($owner);
    }

    public function getKey()
    {
        $this->__load();
        return parent::getKey();
    }

    public function getModifier()
    {
        $this->__load();
        return parent::getModifier();
    }

    public function getInfo()
    {
        $this->__load();
        return parent::getInfo();
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function getTypeName()
    {
        $this->__load();
        return parent::getTypeName();
    }

    public function setValue($value)
    {
        $this->__load();
        return parent::setValue($value);
    }

    public function isEqualSurcharge(\XLite\Model\Base\Surcharge $surcharge)
    {
        $this->__load();
        return parent::isEqualSurcharge($surcharge);
    }

    public function replaceSurcharge(\XLite\Model\Base\Surcharge $surcharge)
    {
        $this->__load();
        return parent::replaceSurcharge($surcharge);
    }

    public function getReplacedProperties()
    {
        $this->__load();
        return parent::getReplacedProperties();
    }

    public function map(array $data)
    {
        $this->__load();
        return parent::map($data);
    }

    public function __get($name)
    {
        $this->__load();
        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        $this->__load();
        return parent::__set($name, $value);
    }

    public function __isset($name)
    {
        $this->__load();
        return parent::__isset($name);
    }

    public function __unset($name)
    {
        $this->__load();
        return parent::__unset($name);
    }

    public function getRepository()
    {
        $this->__load();
        return parent::getRepository();
    }

    public function checkCache()
    {
        $this->__load();
        return parent::checkCache();
    }

    public function detach()
    {
        $this->__load();
        return parent::detach();
    }

    public function __call($method, array $args = array (
))
    {
        $this->__load();
        return parent::__call($method, $args);
    }

    public function setterProperty($property, $value)
    {
        $this->__load();
        return parent::setterProperty($property, $value);
    }

    public function getterProperty($property)
    {
        $this->__load();
        return parent::getterProperty($property);
    }

    public function isPersistent()
    {
        $this->__load();
        return parent::isPersistent();
    }

    public function isDetached()
    {
        $this->__load();
        return parent::isDetached();
    }

    public function getUniqueIdentifierName()
    {
        $this->__load();
        return parent::getUniqueIdentifierName();
    }

    public function getUniqueIdentifier()
    {
        $this->__load();
        return parent::getUniqueIdentifier();
    }

    public function update()
    {
        $this->__load();
        return parent::update();
    }

    public function create()
    {
        $this->__load();
        return parent::create();
    }

    public function delete()
    {
        $this->__load();
        return parent::delete();
    }

    public function processFiles($field, array $data)
    {
        $this->__load();
        return parent::processFiles($field, $data);
    }

    public function cloneEntity()
    {
        $this->__load();
        return parent::cloneEntity();
    }

    public function prepareEntityBeforeCommit($type)
    {
        $this->__load();
        return parent::prepareEntityBeforeCommit($type);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'type', 'code', 'class', 'include', 'available', 'value', 'name', 'owner');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}