<?php

namespace XLite\Model\Proxy\__CG__\XLite\Model\Payment;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class BackendTransaction extends \XLite\Model\Payment\BackendTransaction implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getChargeValueModifier()
    {
        $this->__load();
        return parent::getChargeValueModifier();
    }

    public function getPaymentMethod()
    {
        $this->__load();
        return parent::getPaymentMethod();
    }

    public function isSucceed()
    {
        $this->__load();
        return parent::isSucceed();
    }

    public function isFailed()
    {
        $this->__load();
        return parent::isFailed();
    }

    public function isCompleted()
    {
        $this->__load();
        return parent::isCompleted();
    }

    public function isRefund()
    {
        $this->__load();
        return parent::isRefund();
    }

    public function isCapture()
    {
        $this->__load();
        return parent::isCapture();
    }

    public function isVoid()
    {
        $this->__load();
        return parent::isVoid();
    }

    public function getReadableStatus()
    {
        $this->__load();
        return parent::getReadableStatus();
    }

    public function isOperationAllowed($operation)
    {
        $this->__load();
        return parent::isOperationAllowed($operation);
    }

    public function isInitial()
    {
        $this->__load();
        return parent::isInitial();
    }

    public function setDataCell($name, $value, $label = NULL)
    {
        $this->__load();
        return parent::setDataCell($name, $value, $label);
    }

    public function getDataCell($name)
    {
        $this->__load();
        return parent::getDataCell($name);
    }

    public function registerTransactionInOrderHistory($suffix = NULL)
    {
        $this->__load();
        return parent::registerTransactionInOrderHistory($suffix);
    }

    public function getHistoryEventDescription()
    {
        $this->__load();
        return parent::getHistoryEventDescription();
    }

    public function getHistoryEventDescriptionData()
    {
        $this->__load();
        return parent::getHistoryEventDescriptionData();
    }

    public function getEventData()
    {
        $this->__load();
        return parent::getEventData();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setDate($date)
    {
        $this->__load();
        return parent::setDate($date);
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setValue($value)
    {
        $this->__load();
        return parent::setValue($value);
    }

    public function getValue()
    {
        $this->__load();
        return parent::getValue();
    }

    public function setType($type)
    {
        $this->__load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function setPaymentTransaction(\XLite\Model\Payment\Transaction $paymentTransaction = NULL)
    {
        $this->__load();
        return parent::setPaymentTransaction($paymentTransaction);
    }

    public function getPaymentTransaction()
    {
        $this->__load();
        return parent::getPaymentTransaction();
    }

    public function addData(\XLite\Model\Payment\BackendTransactionData $data)
    {
        $this->__load();
        return parent::addData($data);
    }

    public function getData()
    {
        $this->__load();
        return parent::getData();
    }

    public function map(array $data)
    {
        $this->__load();
        return parent::map($data);
    }

    public function __get($name)
    {
        $this->__load();
        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        $this->__load();
        return parent::__set($name, $value);
    }

    public function __isset($name)
    {
        $this->__load();
        return parent::__isset($name);
    }

    public function __unset($name)
    {
        $this->__load();
        return parent::__unset($name);
    }

    public function getRepository()
    {
        $this->__load();
        return parent::getRepository();
    }

    public function checkCache()
    {
        $this->__load();
        return parent::checkCache();
    }

    public function detach()
    {
        $this->__load();
        return parent::detach();
    }

    public function __call($method, array $args = array (
))
    {
        $this->__load();
        return parent::__call($method, $args);
    }

    public function setterProperty($property, $value)
    {
        $this->__load();
        return parent::setterProperty($property, $value);
    }

    public function getterProperty($property)
    {
        $this->__load();
        return parent::getterProperty($property);
    }

    public function isPersistent()
    {
        $this->__load();
        return parent::isPersistent();
    }

    public function isDetached()
    {
        $this->__load();
        return parent::isDetached();
    }

    public function getUniqueIdentifierName()
    {
        $this->__load();
        return parent::getUniqueIdentifierName();
    }

    public function getUniqueIdentifier()
    {
        $this->__load();
        return parent::getUniqueIdentifier();
    }

    public function update()
    {
        $this->__load();
        return parent::update();
    }

    public function create()
    {
        $this->__load();
        return parent::create();
    }

    public function delete()
    {
        $this->__load();
        return parent::delete();
    }

    public function processFiles($field, array $data)
    {
        $this->__load();
        return parent::processFiles($field, $data);
    }

    public function cloneEntity()
    {
        $this->__load();
        return parent::cloneEntity();
    }

    public function prepareEntityBeforeCommit($type)
    {
        $this->__load();
        return parent::prepareEntityBeforeCommit($type);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'date', 'status', 'value', 'type', 'payment_transaction', 'data');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}