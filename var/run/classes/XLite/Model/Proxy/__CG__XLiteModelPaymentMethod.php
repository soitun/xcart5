<?php

namespace XLite\Model\Proxy\__CG__\XLite\Model\Payment;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Method extends \XLite\Model\Payment\Method implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getSetting($name)
    {
        $this->__load();
        return parent::getSetting($name);
    }

    public function isEnabled()
    {
        $this->__load();
        return parent::isEnabled();
    }

    public function getProcessor()
    {
        $this->__load();
        return parent::getProcessor();
    }

    public function setClass($class)
    {
        $this->__load();
        return parent::setClass($class);
    }

    public function getPosition()
    {
        $this->__load();
        return parent::getPosition();
    }

    public function setPosition($position)
    {
        $this->__load();
        return parent::setPosition($position);
    }

    public function getSettingEntity($name)
    {
        $this->__load();
        return parent::getSettingEntity($name);
    }

    public function setSetting($name, $value)
    {
        $this->__load();
        return parent::setSetting($name, $value);
    }

    public function __call($method, array $arguments = array (
))
    {
        $this->__load();
        return parent::__call($method, $arguments);
    }

    public function getWarningNote()
    {
        $this->__load();
        return parent::getWarningNote();
    }

    public function getAdminIconURL()
    {
        $this->__load();
        return parent::getAdminIconURL();
    }

    public function setEnabled($enabled)
    {
        $this->__load();
        return parent::setEnabled($enabled);
    }

    public function setAdded($added)
    {
        $this->__load();
        return parent::setAdded($added);
    }

    public function getMethodId()
    {
        $this->__load();
        return parent::getMethodId();
    }

    public function setServiceName($serviceName)
    {
        $this->__load();
        return parent::setServiceName($serviceName);
    }

    public function getServiceName()
    {
        $this->__load();
        return parent::getServiceName();
    }

    public function getClass()
    {
        $this->__load();
        return parent::getClass();
    }

    public function setModuleName($moduleName)
    {
        $this->__load();
        return parent::setModuleName($moduleName);
    }

    public function getModuleName()
    {
        $this->__load();
        return parent::getModuleName();
    }

    public function setOrderby($orderby)
    {
        $this->__load();
        return parent::setOrderby($orderby);
    }

    public function getOrderby()
    {
        $this->__load();
        return parent::getOrderby();
    }

    public function getEnabled()
    {
        $this->__load();
        return parent::getEnabled();
    }

    public function setModuleEnabled($moduleEnabled)
    {
        $this->__load();
        return parent::setModuleEnabled($moduleEnabled);
    }

    public function getModuleEnabled()
    {
        $this->__load();
        return parent::getModuleEnabled();
    }

    public function getAdded()
    {
        $this->__load();
        return parent::getAdded();
    }

    public function setType($type)
    {
        $this->__load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function addSettings(\XLite\Model\Payment\MethodSetting $settings)
    {
        $this->__load();
        return parent::addSettings($settings);
    }

    public function getSettings()
    {
        $this->__load();
        return parent::getSettings();
    }

    public function addTransactions(\XLite\Model\Payment\Transaction $transactions)
    {
        $this->__load();
        return parent::addTransactions($transactions);
    }

    public function getTransactions()
    {
        $this->__load();
        return parent::getTransactions();
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setName($value)
    {
        $this->__load();
        return parent::setName($value);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setTitle($value)
    {
        $this->__load();
        return parent::setTitle($value);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setDescription($value)
    {
        $this->__load();
        return parent::setDescription($value);
    }

    public function getAdminDescription()
    {
        $this->__load();
        return parent::getAdminDescription();
    }

    public function setAdminDescription($value)
    {
        $this->__load();
        return parent::setAdminDescription($value);
    }

    public function getInstruction()
    {
        $this->__load();
        return parent::getInstruction();
    }

    public function setInstruction($value)
    {
        $this->__load();
        return parent::setInstruction($value);
    }

    public function setEditLanguage($code)
    {
        $this->__load();
        return parent::setEditLanguage($code);
    }

    public function getTranslations()
    {
        $this->__load();
        return parent::getTranslations();
    }

    public function addTranslations(\XLite\Model\Base\Translation $translation)
    {
        $this->__load();
        return parent::addTranslations($translation);
    }

    public function getTranslation($code = NULL, $allowEmptyResult = false)
    {
        $this->__load();
        return parent::getTranslation($code, $allowEmptyResult);
    }

    public function getHardTranslation($code = NULL)
    {
        $this->__load();
        return parent::getHardTranslation($code);
    }

    public function getSoftTranslation($code = NULL)
    {
        $this->__load();
        return parent::getSoftTranslation($code);
    }

    public function hasTranslation($code = NULL)
    {
        $this->__load();
        return parent::hasTranslation($code);
    }

    public function getTranslationCodes()
    {
        $this->__load();
        return parent::getTranslationCodes();
    }

    public function detach()
    {
        $this->__load();
        return parent::detach();
    }

    public function cloneEntity()
    {
        $this->__load();
        return parent::cloneEntity();
    }

    public function map(array $data)
    {
        $this->__load();
        return parent::map($data);
    }

    public function __get($name)
    {
        $this->__load();
        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        $this->__load();
        return parent::__set($name, $value);
    }

    public function __isset($name)
    {
        $this->__load();
        return parent::__isset($name);
    }

    public function __unset($name)
    {
        $this->__load();
        return parent::__unset($name);
    }

    public function getRepository()
    {
        $this->__load();
        return parent::getRepository();
    }

    public function checkCache()
    {
        $this->__load();
        return parent::checkCache();
    }

    public function setterProperty($property, $value)
    {
        $this->__load();
        return parent::setterProperty($property, $value);
    }

    public function getterProperty($property)
    {
        $this->__load();
        return parent::getterProperty($property);
    }

    public function isPersistent()
    {
        $this->__load();
        return parent::isPersistent();
    }

    public function isDetached()
    {
        $this->__load();
        return parent::isDetached();
    }

    public function getUniqueIdentifierName()
    {
        $this->__load();
        return parent::getUniqueIdentifierName();
    }

    public function getUniqueIdentifier()
    {
        $this->__load();
        return parent::getUniqueIdentifier();
    }

    public function update()
    {
        $this->__load();
        return parent::update();
    }

    public function create()
    {
        $this->__load();
        return parent::create();
    }

    public function delete()
    {
        $this->__load();
        return parent::delete();
    }

    public function processFiles($field, array $data)
    {
        $this->__load();
        return parent::processFiles($field, $data);
    }

    public function prepareEntityBeforeCommit($type)
    {
        $this->__load();
        return parent::prepareEntityBeforeCommit($type);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'method_id', 'service_name', 'class', 'moduleName', 'orderby', 'enabled', 'moduleEnabled', 'added', 'type', 'settings', 'transactions', 'translations');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}