<?php

namespace XLite\Model\Proxy\__CG__\XLite\Model\Payment;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Transaction extends \XLite\Model\Payment\Transaction implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function isXPC()
    {
        $this->__load();
        return parent::isXPC();
    }

    public function isOpen()
    {
        $this->__load();
        return parent::isOpen();
    }

    public function setXpcDetails($cardNumber, $cardType, $useForRecharges = 'N')
    {
        $this->__load();
        return parent::setXpcDetails($cardNumber, $cardType, $useForRecharges);
    }

    public function getCard($forRechargesOnly = false)
    {
        $this->__load();
        return parent::getCard($forRechargesOnly);
    }

    public function setXpcData(\XLite\Module\CDev\XPaymentsConnector\Model\Payment\XpcTransactionData $xpcData = NULL)
    {
        $this->__load();
        return parent::setXpcData($xpcData);
    }

    public function getXpcData()
    {
        $this->__load();
        return parent::getXpcData();
    }

    public function setValue($value)
    {
        $this->__load();
        return parent::setValue($value);
    }

    public function updateValue(\XLite\Model\Order $order)
    {
        $this->__load();
        return parent::updateValue($order);
    }

    public function handleCheckoutAction()
    {
        $this->__load();
        return parent::handleCheckoutAction();
    }

    public function getChargeValueModifier()
    {
        $this->__load();
        return parent::getChargeValueModifier();
    }

    public function isCanceled()
    {
        $this->__load();
        return parent::isCanceled();
    }

    public function isFailed()
    {
        $this->__load();
        return parent::isFailed();
    }

    public function isCompleted()
    {
        $this->__load();
        return parent::isCompleted();
    }

    public function isInProgress()
    {
        $this->__load();
        return parent::isInProgress();
    }

    public function isPending()
    {
        $this->__load();
        return parent::isPending();
    }

    public function isVoid()
    {
        $this->__load();
        return parent::isVoid();
    }

    public function isAuthorized()
    {
        $this->__load();
        return parent::isAuthorized();
    }

    public function isCaptured()
    {
        $this->__load();
        return parent::isCaptured();
    }

    public function isRefunded()
    {
        $this->__load();
        return parent::isRefunded();
    }

    public function isCaptureTransactionAllowed()
    {
        $this->__load();
        return parent::isCaptureTransactionAllowed();
    }

    public function isVoidTransactionAllowed()
    {
        $this->__load();
        return parent::isVoidTransactionAllowed();
    }

    public function isRefundTransactionAllowed()
    {
        $this->__load();
        return parent::isRefundTransactionAllowed();
    }

    public function getReadableStatus($status = NULL)
    {
        $this->__load();
        return parent::getReadableStatus($status);
    }

    public function setDataCell($name, $value, $label = NULL, $accessLevel = NULL)
    {
        $this->__load();
        return parent::setDataCell($name, $value, $label, $accessLevel);
    }

    public function getDataCell($name)
    {
        $this->__load();
        return parent::getDataCell($name);
    }

    public function createBackendTransaction($transactionType)
    {
        $this->__load();
        return parent::createBackendTransaction($transactionType);
    }

    public function getInitialBackendTransaction()
    {
        $this->__load();
        return parent::getInitialBackendTransaction();
    }

    public function registerTransactionInOrderHistory($suffix = NULL)
    {
        $this->__load();
        return parent::registerTransactionInOrderHistory($suffix);
    }

    public function getHistoryEventDescription()
    {
        $this->__load();
        return parent::getHistoryEventDescription();
    }

    public function getHistoryEventDescriptionData()
    {
        $this->__load();
        return parent::getHistoryEventDescriptionData();
    }

    public function getEventData()
    {
        $this->__load();
        return parent::getEventData();
    }

    public function isSameMethod(\XLite\Model\Payment\Method $method)
    {
        $this->__load();
        return parent::isSameMethod($method);
    }

    public function getTransactionId()
    {
        $this->__load();
        return parent::getTransactionId();
    }

    public function setMethodName($methodName)
    {
        $this->__load();
        return parent::setMethodName($methodName);
    }

    public function getMethodName()
    {
        $this->__load();
        return parent::getMethodName();
    }

    public function setMethodLocalName($methodLocalName)
    {
        $this->__load();
        return parent::setMethodLocalName($methodLocalName);
    }

    public function getMethodLocalName()
    {
        $this->__load();
        return parent::getMethodLocalName();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function getValue()
    {
        $this->__load();
        return parent::getValue();
    }

    public function setNote($note)
    {
        $this->__load();
        return parent::setNote($note);
    }

    public function getNote()
    {
        $this->__load();
        return parent::getNote();
    }

    public function setType($type)
    {
        $this->__load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function setPublicId($publicId)
    {
        $this->__load();
        return parent::setPublicId($publicId);
    }

    public function getPublicId()
    {
        $this->__load();
        return parent::getPublicId();
    }

    public function setOrder(\XLite\Model\Order $order = NULL)
    {
        $this->__load();
        return parent::setOrder($order);
    }

    public function getOrder()
    {
        $this->__load();
        return parent::getOrder();
    }

    public function setPaymentMethod(\XLite\Model\Payment\Method $paymentMethod = NULL)
    {
        $this->__load();
        return parent::setPaymentMethod($paymentMethod);
    }

    public function getPaymentMethod()
    {
        $this->__load();
        return parent::getPaymentMethod();
    }

    public function addData(\XLite\Model\Payment\TransactionData $data)
    {
        $this->__load();
        return parent::addData($data);
    }

    public function getData()
    {
        $this->__load();
        return parent::getData();
    }

    public function addBackendTransactions(\XLite\Model\Payment\BackendTransaction $backendTransactions)
    {
        $this->__load();
        return parent::addBackendTransactions($backendTransactions);
    }

    public function getBackendTransactions()
    {
        $this->__load();
        return parent::getBackendTransactions();
    }

    public function map(array $data)
    {
        $this->__load();
        return parent::map($data);
    }

    public function __get($name)
    {
        $this->__load();
        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        $this->__load();
        return parent::__set($name, $value);
    }

    public function __isset($name)
    {
        $this->__load();
        return parent::__isset($name);
    }

    public function __unset($name)
    {
        $this->__load();
        return parent::__unset($name);
    }

    public function getRepository()
    {
        $this->__load();
        return parent::getRepository();
    }

    public function checkCache()
    {
        $this->__load();
        return parent::checkCache();
    }

    public function detach()
    {
        $this->__load();
        return parent::detach();
    }

    public function __call($method, array $args = array (
))
    {
        $this->__load();
        return parent::__call($method, $args);
    }

    public function setterProperty($property, $value)
    {
        $this->__load();
        return parent::setterProperty($property, $value);
    }

    public function getterProperty($property)
    {
        $this->__load();
        return parent::getterProperty($property);
    }

    public function isPersistent()
    {
        $this->__load();
        return parent::isPersistent();
    }

    public function isDetached()
    {
        $this->__load();
        return parent::isDetached();
    }

    public function getUniqueIdentifierName()
    {
        $this->__load();
        return parent::getUniqueIdentifierName();
    }

    public function getUniqueIdentifier()
    {
        $this->__load();
        return parent::getUniqueIdentifier();
    }

    public function update()
    {
        $this->__load();
        return parent::update();
    }

    public function create()
    {
        $this->__load();
        return parent::create();
    }

    public function delete()
    {
        $this->__load();
        return parent::delete();
    }

    public function processFiles($field, array $data)
    {
        $this->__load();
        return parent::processFiles($field, $data);
    }

    public function cloneEntity()
    {
        $this->__load();
        return parent::cloneEntity();
    }

    public function prepareEntityBeforeCommit($type)
    {
        $this->__load();
        return parent::prepareEntityBeforeCommit($type);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'transaction_id', 'method_name', 'method_local_name', 'status', 'value', 'note', 'type', 'public_id', 'xpc_data', 'order', 'payment_method', 'data', 'backend_transactions');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}