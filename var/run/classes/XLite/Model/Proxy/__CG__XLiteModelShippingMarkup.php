<?php

namespace XLite\Model\Proxy\__CG__\XLite\Model\Shipping;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Markup extends \XLite\Model\Shipping\Markup implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getMarkupValue()
    {
        $this->__load();
        return parent::getMarkupValue();
    }

    public function setMarkupValue($value)
    {
        $this->__load();
        return parent::setMarkupValue($value);
    }

    public function getMarkupId()
    {
        $this->__load();
        return parent::getMarkupId();
    }

    public function setMinWeight($minWeight)
    {
        $this->__load();
        return parent::setMinWeight($minWeight);
    }

    public function getMinWeight()
    {
        $this->__load();
        return parent::getMinWeight();
    }

    public function setMaxWeight($maxWeight)
    {
        $this->__load();
        return parent::setMaxWeight($maxWeight);
    }

    public function getMaxWeight()
    {
        $this->__load();
        return parent::getMaxWeight();
    }

    public function setMinTotal($minTotal)
    {
        $this->__load();
        return parent::setMinTotal($minTotal);
    }

    public function getMinTotal()
    {
        $this->__load();
        return parent::getMinTotal();
    }

    public function setMaxTotal($maxTotal)
    {
        $this->__load();
        return parent::setMaxTotal($maxTotal);
    }

    public function getMaxTotal()
    {
        $this->__load();
        return parent::getMaxTotal();
    }

    public function setMinItems($minItems)
    {
        $this->__load();
        return parent::setMinItems($minItems);
    }

    public function getMinItems()
    {
        $this->__load();
        return parent::getMinItems();
    }

    public function setMaxItems($maxItems)
    {
        $this->__load();
        return parent::setMaxItems($maxItems);
    }

    public function getMaxItems()
    {
        $this->__load();
        return parent::getMaxItems();
    }

    public function setMarkupFlat($markupFlat)
    {
        $this->__load();
        return parent::setMarkupFlat($markupFlat);
    }

    public function getMarkupFlat()
    {
        $this->__load();
        return parent::getMarkupFlat();
    }

    public function setMarkupPercent($markupPercent)
    {
        $this->__load();
        return parent::setMarkupPercent($markupPercent);
    }

    public function getMarkupPercent()
    {
        $this->__load();
        return parent::getMarkupPercent();
    }

    public function setMarkupPerItem($markupPerItem)
    {
        $this->__load();
        return parent::setMarkupPerItem($markupPerItem);
    }

    public function getMarkupPerItem()
    {
        $this->__load();
        return parent::getMarkupPerItem();
    }

    public function setMarkupPerWeight($markupPerWeight)
    {
        $this->__load();
        return parent::setMarkupPerWeight($markupPerWeight);
    }

    public function getMarkupPerWeight()
    {
        $this->__load();
        return parent::getMarkupPerWeight();
    }

    public function setShippingMethod(\XLite\Model\Shipping\Method $shippingMethod = NULL)
    {
        $this->__load();
        return parent::setShippingMethod($shippingMethod);
    }

    public function getShippingMethod()
    {
        $this->__load();
        return parent::getShippingMethod();
    }

    public function setZone(\XLite\Model\Zone $zone = NULL)
    {
        $this->__load();
        return parent::setZone($zone);
    }

    public function getZone()
    {
        $this->__load();
        return parent::getZone();
    }

    public function map(array $data)
    {
        $this->__load();
        return parent::map($data);
    }

    public function __get($name)
    {
        $this->__load();
        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        $this->__load();
        return parent::__set($name, $value);
    }

    public function __isset($name)
    {
        $this->__load();
        return parent::__isset($name);
    }

    public function __unset($name)
    {
        $this->__load();
        return parent::__unset($name);
    }

    public function getRepository()
    {
        $this->__load();
        return parent::getRepository();
    }

    public function checkCache()
    {
        $this->__load();
        return parent::checkCache();
    }

    public function detach()
    {
        $this->__load();
        return parent::detach();
    }

    public function __call($method, array $args = array (
))
    {
        $this->__load();
        return parent::__call($method, $args);
    }

    public function setterProperty($property, $value)
    {
        $this->__load();
        return parent::setterProperty($property, $value);
    }

    public function getterProperty($property)
    {
        $this->__load();
        return parent::getterProperty($property);
    }

    public function isPersistent()
    {
        $this->__load();
        return parent::isPersistent();
    }

    public function isDetached()
    {
        $this->__load();
        return parent::isDetached();
    }

    public function getUniqueIdentifierName()
    {
        $this->__load();
        return parent::getUniqueIdentifierName();
    }

    public function getUniqueIdentifier()
    {
        $this->__load();
        return parent::getUniqueIdentifier();
    }

    public function update()
    {
        $this->__load();
        return parent::update();
    }

    public function create()
    {
        $this->__load();
        return parent::create();
    }

    public function delete()
    {
        $this->__load();
        return parent::delete();
    }

    public function processFiles($field, array $data)
    {
        $this->__load();
        return parent::processFiles($field, $data);
    }

    public function cloneEntity()
    {
        $this->__load();
        return parent::cloneEntity();
    }

    public function prepareEntityBeforeCommit($type)
    {
        $this->__load();
        return parent::prepareEntityBeforeCommit($type);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'markup_id', 'min_weight', 'max_weight', 'min_total', 'max_total', 'min_items', 'max_items', 'markup_flat', 'markup_percent', 'markup_per_item', 'markup_per_weight', 'shipping_method', 'zone');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}