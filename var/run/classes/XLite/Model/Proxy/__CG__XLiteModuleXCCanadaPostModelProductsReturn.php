<?php

namespace XLite\Model\Proxy\__CG__\XLite\Module\XC\CanadaPost\Model;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ProductsReturn extends \XLite\Module\XC\CanadaPost\Model\ProductsReturn implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setOldStatus($value)
    {
        $this->__load();
        return parent::setOldStatus($value);
    }

    public function setOrder(\XLite\Model\Order $order = NULL)
    {
        $this->__load();
        return parent::setOrder($order);
    }

    public function addItem(\XLite\Module\XC\CanadaPost\Model\ProductsReturn\Item $newItem)
    {
        $this->__load();
        return parent::addItem($newItem);
    }

    public function addLink(\XLite\Module\XC\CanadaPost\Model\ProductsReturn\Link $newLink)
    {
        $this->__load();
        return parent::addLink($newLink);
    }

    public function getNumber()
    {
        $this->__load();
        return parent::getNumber();
    }

    public function setStatus($value)
    {
        $this->__load();
        return parent::setStatus($value);
    }

    public function canBeApproved()
    {
        $this->__load();
        return parent::canBeApproved();
    }

    public function canBeRejected()
    {
        $this->__load();
        return parent::canBeRejected();
    }

    public function prepareBeforeSave()
    {
        $this->__load();
        return parent::prepareBeforeSave();
    }

    public function getItemsTotalAmount()
    {
        $this->__load();
        return parent::getItemsTotalAmount();
    }

    public function getItemsTotalCost()
    {
        $this->__load();
        return parent::getItemsTotalCost();
    }

    public function getItemsTotalWeight()
    {
        $this->__load();
        return parent::getItemsTotalWeight();
    }

    public function hasLinks()
    {
        $this->__load();
        return parent::hasLinks();
    }

    public function getReturnLabelLink()
    {
        $this->__load();
        return parent::getReturnLabelLink();
    }

    public function getLinkByRel($rel)
    {
        $this->__load();
        return parent::getLinkByRel($rel);
    }

    public function getApiCallErrors()
    {
        $this->__load();
        return parent::getApiCallErrors();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setDate($date)
    {
        $this->__load();
        return parent::setDate($date);
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function setLastRenewDate($lastRenewDate)
    {
        $this->__load();
        return parent::setLastRenewDate($lastRenewDate);
    }

    public function getLastRenewDate()
    {
        $this->__load();
        return parent::getLastRenewDate();
    }

    public function setNotes($notes)
    {
        $this->__load();
        return parent::setNotes($notes);
    }

    public function getNotes()
    {
        $this->__load();
        return parent::getNotes();
    }

    public function setAdminNotes($adminNotes)
    {
        $this->__load();
        return parent::setAdminNotes($adminNotes);
    }

    public function getAdminNotes()
    {
        $this->__load();
        return parent::getAdminNotes();
    }

    public function setTrackingPin($trackingPin)
    {
        $this->__load();
        return parent::setTrackingPin($trackingPin);
    }

    public function getTrackingPin()
    {
        $this->__load();
        return parent::getTrackingPin();
    }

    public function addItems(\XLite\Module\XC\CanadaPost\Model\ProductsReturn\Item $items)
    {
        $this->__load();
        return parent::addItems($items);
    }

    public function getItems()
    {
        $this->__load();
        return parent::getItems();
    }

    public function addLinks(\XLite\Module\XC\CanadaPost\Model\ProductsReturn\Link $links)
    {
        $this->__load();
        return parent::addLinks($links);
    }

    public function getLinks()
    {
        $this->__load();
        return parent::getLinks();
    }

    public function getOrder()
    {
        $this->__load();
        return parent::getOrder();
    }

    public function map(array $data)
    {
        $this->__load();
        return parent::map($data);
    }

    public function __get($name)
    {
        $this->__load();
        return parent::__get($name);
    }

    public function __set($name, $value)
    {
        $this->__load();
        return parent::__set($name, $value);
    }

    public function __isset($name)
    {
        $this->__load();
        return parent::__isset($name);
    }

    public function __unset($name)
    {
        $this->__load();
        return parent::__unset($name);
    }

    public function getRepository()
    {
        $this->__load();
        return parent::getRepository();
    }

    public function checkCache()
    {
        $this->__load();
        return parent::checkCache();
    }

    public function detach()
    {
        $this->__load();
        return parent::detach();
    }

    public function __call($method, array $args = array (
))
    {
        $this->__load();
        return parent::__call($method, $args);
    }

    public function setterProperty($property, $value)
    {
        $this->__load();
        return parent::setterProperty($property, $value);
    }

    public function getterProperty($property)
    {
        $this->__load();
        return parent::getterProperty($property);
    }

    public function isPersistent()
    {
        $this->__load();
        return parent::isPersistent();
    }

    public function isDetached()
    {
        $this->__load();
        return parent::isDetached();
    }

    public function getUniqueIdentifierName()
    {
        $this->__load();
        return parent::getUniqueIdentifierName();
    }

    public function getUniqueIdentifier()
    {
        $this->__load();
        return parent::getUniqueIdentifier();
    }

    public function update()
    {
        $this->__load();
        return parent::update();
    }

    public function create()
    {
        $this->__load();
        return parent::create();
    }

    public function delete()
    {
        $this->__load();
        return parent::delete();
    }

    public function processFiles($field, array $data)
    {
        $this->__load();
        return parent::processFiles($field, $data);
    }

    public function cloneEntity()
    {
        $this->__load();
        return parent::cloneEntity();
    }

    public function prepareEntityBeforeCommit($type)
    {
        $this->__load();
        return parent::prepareEntityBeforeCommit($type);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'status', 'date', 'lastRenewDate', 'notes', 'adminNotes', 'trackingPin', 'items', 'links', 'order');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}